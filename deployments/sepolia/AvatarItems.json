{
  "address": "0xA47fBE901917f45718d07731E5BCBB2EE659A367",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "packPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AvatarItems_insufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "earnedReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum AvatarItems.ItemType",
          "name": "_type",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "itemAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "packBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "packOpened",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "AuthorizedContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "Discounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ItemDescriptions",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "itemSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum AvatarItems.ItemType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ItemTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum AvatarItems.ItemType",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "itemSupply",
          "type": "uint256"
        }
      ],
      "name": "addAvatarItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "additionalSupply",
          "type": "uint256"
        }
      ],
      "name": "addItemSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "authorizeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "buyPack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "itemName",
          "type": "string"
        }
      ],
      "name": "doesItemExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "earnRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChanceArray",
      "outputs": [
        {
          "internalType": "uint8[5]",
          "name": "",
          "type": "uint8[5]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getRequestAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_itemCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_packPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_rewardCoins",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "setPackPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "viewItemDescription",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "itemSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct AvatarItems.ItemDescription",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "waitingForResponse",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe57ac56d53143969318231d303d9496619a5432539979707f61270839451ac48",
  "receipt": {
    "to": null,
    "from": "0x540467feca43907A701311D0721df481D1f9e238",
    "contractAddress": "0xA47fBE901917f45718d07731E5BCBB2EE659A367",
    "transactionIndex": 53,
    "gasUsed": "4771579",
    "logsBloom": "0x
    "blockHash": "0xf16d81fd35216a9f4709dd1a7634466832732217f2e93909ef994be8ec492ab8",
    "transactionHash": "0xe57ac56d53143969318231d303d9496619a5432539979707f61270839451ac48",
    "logs": [],
    "blockNumber": 4756279,
    "cumulativeGasUsed": "18011672",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "2684",
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "2500000",
    "10000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "732b51a740a1e8959ae560eb199be38b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"packPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AvatarItems_insufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"earnedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum AvatarItems.ItemType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"itemAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"packBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"packOpened\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AuthorizedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Discounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ItemDescriptions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"itemSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AvatarItems.ItemType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ItemTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AvatarItems.ItemType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"itemSupply\",\"type\":\"uint256\"}],\"name\":\"addAvatarItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalSupply\",\"type\":\"uint256\"}],\"name\":\"addItemSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"authorizeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"buyPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"itemName\",\"type\":\"string\"}],\"name\":\"doesItemExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"earnRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChanceArray\",\"outputs\":[{\"internalType\":\"uint8[5]\",\"name\":\"\",\"type\":\"uint8[5]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getRequestAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_itemCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_packPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPackPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"viewItemDescription\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"itemSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct AvatarItems.ItemDescription\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"waitingForResponse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AvatarItems.sol\":\"AvatarItems\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/AvatarItems.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract AvatarItems is ERC1155, VRFConsumerBaseV2 {\\n    // ERRORS\\n    error AvatarItems_insufficientBalance();\\n\\n    // EVENTS\\n    event packBought(address indexed _address, uint256 _requestId);\\n    event packOpened(\\n        address indexed _address,\\n        uint256 _requestId,\\n        uint256 _itemId\\n    );\\n    event itemAdded(ItemType _type, uint256 _itemId, string _name);\\n    event earnedReward(address indexed _address, uint256 _amount);\\n\\n    // COINS\\n    uint256 public constant s_rewardCoins = 0;\\n\\n    // ITEMS\\n    uint256 public s_itemCounter = 1;\\n\\n    uint256 public s_packPrice;\\n    address private s_owner;\\n\\n    // VRF\\n    VRFCoordinatorV2Interface COORDINATOR;\\n    uint64 s_subscriptionId;\\n    bytes32 s_keyHash;\\n    uint32 s_callbackGasLimit;\\n    uint16 constant s_requestConfirmations = 3;\\n    uint32 constant s_numWords = 2;\\n\\n    // ITEMTYPE for targeting body part\\n    enum ItemType {\\n        avatarSkin, //12%\\n        avatarUpperBody, //22%\\n        avatarLowerBody, //22%\\n        avatarShoes, //22%\\n        avatarAccessories //22%\\n    }\\n\\n    // DESCRIPTION OF TOKEN IDS\\n    struct ItemDescription {\\n        string name;\\n        uint256 itemSupply;\\n    }\\n\\n    // Mapping item type to all token ids that are made for the type\\n    mapping(ItemType => uint256[]) public ItemTypes;\\n\\n    // Mapping token id to their description\\n    mapping(uint256 => ItemDescription) public ItemDescriptions;\\n\\n    // Mapping to store authorized contracts(games and content contracts)\\n    mapping(address => bool) public AuthorizedContracts;\\n\\n    // Mapping to store the discounts for the packs\\n    mapping(address => uint256) public Discounts;\\n\\n    // OWNER MODIFIER\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == s_owner,\\n            \\\"The address doesnt have permission to call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    // CONTRACT AUTHORIZATION MODIFIER TO CHECK IF THE EXTERNAL CONTRACTS CAN CALL OUR FUNCTION\\n    modifier isAuthorized() {\\n        require(\\n            AuthorizedContracts[msg.sender] == true,\\n            \\\"The address is not part of authorized contracts\\\"\\n        );\\n        _;\\n    }\\n\\n    // NEED TO ADD THE IPFS TOKEN URI\\n    constructor(\\n        uint64 subscriptionId,\\n        address vrfCoordinator,\\n        bytes32 keyHash,\\n        uint32 callbackGasLimit,\\n        uint256 packPrice\\n    )\\n        ERC1155(\\\"https://ipfs.io/ipfs/HASH_HERE/{id}.json\\\")\\n        VRFConsumerBaseV2(vrfCoordinator)\\n    {\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\n        s_owner = msg.sender;\\n        s_subscriptionId = subscriptionId;\\n        s_keyHash = keyHash;\\n        s_callbackGasLimit = callbackGasLimit;\\n        s_packPrice = packPrice;\\n    }\\n\\n    // DOES THE ITEM EXIST\\n    function doesItemExist(string memory itemName) public view returns (bool) {\\n        bool result = false;\\n        for (uint256 i = 0; i < s_itemCounter; i++) {\\n            if (\\n                keccak256(bytes(ItemDescriptions[i + 1].name)) ==\\n                keccak256(bytes(itemName))\\n            ) {\\n                result = true;\\n                break;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    // ADD NEW ITEM\\n    function addAvatarItem(\\n        ItemType _type,\\n        string memory newName,\\n        uint256 itemSupply\\n    ) public onlyOwner {\\n        require(doesItemExist(newName) == false, \\\"This item already exists\\\");\\n        require(itemSupply > 0, \\\"Item must have item Supply\\\");\\n        ItemDescriptions[s_itemCounter] = ItemDescription(newName, itemSupply);\\n        ItemTypes[_type].push(s_itemCounter);\\n        s_itemCounter++;\\n\\n        emit itemAdded(_type, s_itemCounter, newName);\\n    }\\n\\n    // ADD SUPPLY OF THE ITEM(y/n)\\n    function addItemSupply(\\n        uint256 itemId,\\n        uint256 additionalSupply\\n    ) public onlyOwner {\\n        require(additionalSupply > 0, \\\"Item must have item Supply\\\");\\n        ItemDescriptions[itemId].itemSupply += additionalSupply;\\n    }\\n\\n    // CALL THIS FUNCTION TO BUY PACKS WITH REWARDCOINS\\n    // To reduce the cost of calling vrf each pack, we could buy multiple at once\\n    function buyPack(address _address) external {\\n        require(\\n            waitingForResponse[_address] == false,\\n            \\\"The address is waiting for response\\\"\\n        );\\n        if (\\n            balanceOf(_address, 0) <\\n            (s_packPrice * (100 - Discounts[_address])) / 100\\n        ) {\\n            revert AvatarItems_insufficientBalance();\\n        }\\n        super._burn(\\n            _address,\\n            0,\\n            (s_packPrice * (100 - Discounts[_address])) / 100 // To calculate discounts\\n        );\\n        uint256 requestId = COORDINATOR.requestRandomWords(\\n            s_keyHash,\\n            s_subscriptionId,\\n            s_requestConfirmations,\\n            s_callbackGasLimit,\\n            s_numWords\\n        );\\n        getRequestAddress[requestId] = _address;\\n        waitingForResponse[_address] = true;\\n\\n        emit packBought(_address, requestId);\\n    }\\n\\n    // GET THE RANDOM NUMBER BACK\\n    mapping(uint256 => address) public getRequestAddress;\\n    mapping(address => bool) public waitingForResponse;\\n\\n    // GET ITEM BACK FROM BUYING A PACK (VRF RANDOM NUMBER)\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        // RANDOM NUMBER FROM 1-100\\n        uint256 result = ((randomWords[0] % 99) + 1);\\n\\n        // TO GET ITEM TYPE\\n        uint256 currentChance = 0;\\n        ItemType resulttype;\\n        uint8[5] memory chances = getChanceArray();\\n        for (uint256 i = 0; i < chances.length; i++) {\\n            if (result > currentChance && result < chances[i]) {\\n                resulttype = ItemType(i);\\n                break;\\n            }\\n            currentChance = chances[i];\\n        }\\n\\n        // GET THE ACTUAL ITEM ID\\n        // First the supply of all items of the resulted item type is sumed up.\\n        uint256 totalItemTypeSupply = 0;\\n        for (uint256 i = 0; i < ItemTypes[resulttype].length; i++) {\\n            totalItemTypeSupply += ItemDescriptions[ItemTypes[resulttype][i]]\\n                .itemSupply; // GET ITEM SUPPLY OF EACH ELEMENT THAT IS NESTED IN CERTAIN ITEM TYPE\\n        }\\n\\n        // Getting the random words from VRF and dividing it by total item supply\\n        uint256 result2 = ((randomWords[0] % totalItemTypeSupply) + 1);\\n\\n        // We loop through an array of item of a certain item type to get the winning item.\\n        // The same as for the item type but the chance array is not provided, because it is all variable based on the token supply\\n        uint256 currentItem = 0;\\n        uint256 itemReward;\\n        for (uint256 i = 0; i < ItemTypes[resulttype].length; i++) {\\n            if (\\n                result2 > currentItem &&\\n                result2 < ItemDescriptions[ItemTypes[resulttype][i]].itemSupply\\n            ) {\\n                itemReward = ItemTypes[resulttype][i];\\n                break;\\n            }\\n            currentItem = ItemDescriptions[ItemTypes[resulttype][i]].itemSupply;\\n        }\\n\\n        // MINT THE ITEM ID\\n        super._mint(getRequestAddress[requestId], itemReward, 1, \\\"\\\");\\n        waitingForResponse[getRequestAddress[requestId]] = false;\\n\\n        emit packOpened(getRequestAddress[requestId], requestId, itemReward);\\n    }\\n\\n    // CHANCE FOR DIFFERENT ITEM TYPES\\n    function getChanceArray() public pure returns (uint8[5] memory) {\\n        return [12, 34, 56, 78, 100];\\n    }\\n\\n    // CALL THIS FUNCTION TO MINT NEW TOKENS\\n    // Figure out how we are going to distribute the reward tokens, if we are going to have distribution in this contract\\n    function earnRewards(\\n        address _address,\\n        uint256 amount\\n    ) external isAuthorized {\\n        super._mint(_address, 0, amount, \\\"\\\");\\n        emit earnedReward(_address, amount);\\n    }\\n\\n    // CHANGE PACK PRICE, if random events occur to give our players discounts\\n    // If we want to give certain players discount we can do mappings of price for each player\\n    // Could include upkeep(time) if we want to\\n    function setPackPrice(uint256 newPrice) external onlyOwner {\\n        require(newPrice > 0, \\\"Pack price can't be 0\\\");\\n        s_packPrice = newPrice;\\n    }\\n\\n    // AUTHORIZES THE CONTRACT TO CALL OUR FUNCTIONS\\n    // If needed can add that only a contract can be authorized, no addresses, for transparency reasons\\n    function authorizeContract(address _address) external onlyOwner {\\n        AuthorizedContracts[_address] = true;\\n    }\\n\\n    // TOKEN URI\\n    function uri(\\n        uint256 _tokenId\\n    ) public pure override returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"https://ipfs.io/HASH_HERE/\\\",\\n                    Strings.toString(_tokenId),\\n                    \\\".json\\\"\\n                )\\n            );\\n    }\\n\\n    // URI for entire contract\\n    function contractURI() public pure returns (string memory) {\\n        return \\\"https://ipfs.io/ipfs/HASH_HERE/collection.json\\\";\\n    }\\n\\n    // VIEW ITEM DESCRIPTION\\n    function viewItemDescription(\\n        uint256 itemId\\n    ) public view returns (ItemDescription memory) {\\n        return ItemDescriptions[itemId];\\n    }\\n}\\n\",\"keccak256\":\"0x58794da6f39dd8c1a0ca4fefbe2aa6b7e6ad56c56b798a538a03aca297e98738\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260016003553480156200001657600080fd5b50604051620058b5380380620058b583398181016040528101906200003c9190620002fe565b836040518060600160405280602881526020016200588d6028913962000068816200018360201b60201c565b508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505083600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600660146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508260078190555081600860006101000a81548163ffffffff021916908363ffffffff160217905550806004819055505050505050620006dd565b8060029081620001949190620005f6565b5050565b600080fd5b600067ffffffffffffffff82169050919050565b620001bc816200019d565b8114620001c857600080fd5b50565b600081519050620001dc81620001b1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200020f82620001e2565b9050919050565b620002218162000202565b81146200022d57600080fd5b50565b600081519050620002418162000216565b92915050565b6000819050919050565b6200025c8162000247565b81146200026857600080fd5b50565b6000815190506200027c8162000251565b92915050565b600063ffffffff82169050919050565b6200029d8162000282565b8114620002a957600080fd5b50565b600081519050620002bd8162000292565b92915050565b6000819050919050565b620002d881620002c3565b8114620002e457600080fd5b50565b600081519050620002f881620002cd565b92915050565b600080600080600060a086880312156200031d576200031c62000198565b5b60006200032d88828901620001cb565b9550506020620003408882890162000230565b945050604062000353888289016200026b565b93505060606200036688828901620002ac565b92505060806200037988828901620002e7565b9150509295509295909350565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200040857607f821691505b6020821081036200041e576200041d620003c0565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000449565b62000494868362000449565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620004d7620004d1620004cb84620002c3565b620004ac565b620002c3565b9050919050565b6000819050919050565b620004f383620004b6565b6200050b6200050282620004de565b84845462000456565b825550505050565b600090565b6200052262000513565b6200052f818484620004e8565b505050565b5b8181101562000557576200054b60008262000518565b60018101905062000535565b5050565b601f821115620005a657620005708162000424565b6200057b8462000439565b810160208510156200058b578190505b620005a36200059a8562000439565b83018262000534565b50505b505050565b600082821c905092915050565b6000620005cb60001984600802620005ab565b1980831691505092915050565b6000620005e68383620005b8565b9150826002028217905092915050565b620006018262000386565b67ffffffffffffffff8111156200061d576200061c62000391565b5b620006298254620003ef565b620006368282856200055b565b600060209050601f8311600181146200066e576000841562000659578287015190505b620006658582620005d8565b865550620006d5565b601f1984166200067e8662000424565b60005b82811015620006a85784890151825560018201915060208501945060208101905062000681565b86831015620006c85784890151620006c4601f891682620005b8565b8355505b6001600288020188555050505b505050505050565b60805161518d62000700600039600081816109e00152610a34015261518d6000f3fe608060405234801561001057600080fd5b50600436106101c35760003560e01c80635edc480b116100f9578063b74fce2811610097578063e8a3d48511610071578063e8a3d4851461054d578063e985e9c51461056b578063f242432a1461059b578063fb7e1ad1146105b7576101c3565b8063b74fce28146104d1578063e41669db146104ed578063e74543b51461051d576101c3565b8063716464b3116100d3578063716464b31461044b57806390541a1114610467578063a22cb46514610485578063aae81461146104a1576101c3565b80635edc480b146103e0578063656bd0ad1461041157806367561d931461042f576101c3565b80631fc8daa411610166578063468fddec11610140578063468fddec146103465780634e1273f414610362578063522700ba146103925780635dacf5f4146103c2576101c3565b80631fc8daa4146102de5780631fe543e31461030e5780632eb2c2d61461032a576101c3565b80630e89341c116101a25780630e89341c146102445780631077246214610274578063163cd4111461029257806316d02d64146102ae576101c3565b8062fdd58e146101c857806301ffc9a7146101f85780630b6af49914610228575b600080fd5b6101e260048036038101906101dd9190612fef565b6105e7565b6040516101ef919061303e565b60405180910390f35b610212600480360381019061020d91906130b1565b6106af565b60405161021f91906130f9565b60405180910390f35b610242600480360381019061023d9190613114565b610791565b005b61025e60048036038101906102599190613114565b61086e565b60405161026b91906131d1565b60405180910390f35b61027c61089f565b604051610289919061303e565b60405180910390f35b6102ac60048036038101906102a79190612fef565b6108a5565b005b6102c860048036038101906102c391906131f3565b6109a6565b6040516102d5919061303e565b60405180910390f35b6102f860048036038101906102f391906131f3565b6109be565b60405161030591906130f9565b60405180910390f35b61032860048036038101906103239190613368565b6109de565b005b610344600480360381019061033f9190613479565b610a9e565b005b610360600480360381019061035b919061360e565b610b3f565b005b61037c60048036038101906103779190613740565b610d68565b6040516103899190613876565b60405180910390f35b6103ac60048036038101906103a79190613114565b610e81565b6040516103b9919061391f565b60405180910390f35b6103ca610f4a565b6040516103d791906139f9565b60405180910390f35b6103fa60048036038101906103f59190613114565b610f92565b604051610408929190613a14565b60405180910390f35b61041961103e565b604051610426919061303e565b60405180910390f35b610449600480360381019061044491906131f3565b611044565b005b61046560048036038101906104609190613a44565b61112f565b005b61046f611233565b60405161047c919061303e565b60405180910390f35b61049f600480360381019061049a9190613ab0565b611238565b005b6104bb60048036038101906104b691906131f3565b61124e565b6040516104c891906130f9565b60405180910390f35b6104eb60048036038101906104e691906131f3565b61126e565b005b61050760048036038101906105029190613af0565b6115eb565b604051610514919061303e565b60405180910390f35b61053760048036038101906105329190613114565b61161c565b6040516105449190613b3f565b60405180910390f35b61055561164f565b60405161056291906131d1565b60405180910390f35b61058560048036038101906105809190613b5a565b61166f565b60405161059291906130f9565b60405180910390f35b6105b560048036038101906105b09190613b9a565b611703565b005b6105d160048036038101906105cc9190613c31565b6117a4565b6040516105de91906130f9565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064e90613cec565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061077a57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061078a575061078982611822565b5b9050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081890613d7e565b60405180910390fd5b60008111610864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085b90613dea565b60405180910390fd5b8060048190555050565b60606108798261188c565b6040516020016108899190613ede565b6040516020818303038152906040529050919050565b60035481565b60011515600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092f90613f7d565b60405180910390fd5b610954826000836040518060200160405280600081525061195a565b8173ffffffffffffffffffffffffffffffffffffffff167f108bfff6e011bf1baf318710fb89a5a2258e9fa5c2c3524b1f5d7e93c3ebf9258260405161099a919061303e565b60405180910390a25050565b600c6020528060005260406000206000915090505481565b600b6020528060005260406000206000915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a9057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610a87929190613f9d565b60405180910390fd5b610a9a8282611b0a565b5050565b610aa6611fe7565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610aec5750610aeb85610ae6611fe7565b61166f565b5b610b2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2290614038565b60405180910390fd5b610b388585858585611fef565b5050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc690613d7e565b60405180910390fd5b60001515610bdc836117a4565b151514610c1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c15906140a4565b60405180910390fd5b60008111610c61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5890614110565b60405180910390fd5b604051806040016040528083815260200182815250600a600060035481526020019081526020016000206000820151816000019081610ca0919061433c565b506020820151816001015590505060096000846004811115610cc557610cc461440e565b5b6004811115610cd757610cd661440e565b5b8152602001908152602001600020600354908060018154018082558091505060019003906000526020600020016000909190919091505560036000815480929190610d219061446c565b91905055507fe54ad0ab4e12db37ed8635a4aa3069158402f2aa26b35ff2f83a3a29744ed7878360035484604051610d5b939291906144fc565b60405180910390a1505050565b60608151835114610dae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da5906145ac565b60405180910390fd5b6000835167ffffffffffffffff811115610dcb57610dca613225565b5b604051908082528060200260200182016040528015610df95781602001602082028036833780820191505090505b50905060005b8451811015610e7657610e46858281518110610e1e57610e1d6145cc565b5b6020026020010151858381518110610e3957610e386145cc565b5b60200260200101516105e7565b828281518110610e5957610e586145cc565b5b60200260200101818152505080610e6f9061446c565b9050610dff565b508091505092915050565b610e89612f0b565b600a6000838152602001908152602001600020604051806040016040529081600082018054610eb79061415f565b80601f0160208091040260200160405190810160405280929190818152602001828054610ee39061415f565b8015610f305780601f10610f0557610100808354040283529160200191610f30565b820191906000526020600020905b815481529060010190602001808311610f1357829003601f168201915b505050505081526020016001820154815250509050919050565b610f52612f25565b6040518060a00160405280600c60ff168152602001602260ff168152602001603860ff168152602001604e60ff168152602001606460ff16815250905090565b600a602052806000526040600020600091509050806000018054610fb59061415f565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe19061415f565b801561102e5780601f106110035761010080835404028352916020019161102e565b820191906000526020600020905b81548152906001019060200180831161101157829003601f168201915b5050505050908060010154905082565b60045481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cb90613d7e565b60405180910390fd5b6001600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b690613d7e565b60405180910390fd5b60008111611202576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f990614110565b60405180910390fd5b80600a6000848152602001908152602001600020600101600082825461122891906145fb565b925050819055505050565b600081565b61124a611243611fe7565b8383612310565b5050565b600e6020528060005260406000206000915054906101000a900460ff1681565b60001515600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514611301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f8906146a1565b60405180910390fd5b6064600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054606461134f91906146c1565b60045461135c91906146f5565b6113669190614766565b6113718260006105e7565b10156113a9576040517fef56c0c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114198160006064600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460646113fd91906146c1565b60045461140a91906146f5565b6114149190614766565b61247c565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600754600660149054906101000a900467ffffffffffffffff166003600860009054906101000a900463ffffffff1660026040518663ffffffff1660e01b81526004016114aa95949392919061480f565b6020604051808303816000875af11580156114c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ed9190614877565b905081600d600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f6996b236aa85c535db5df7b3cb8925ac9a6758d1550035bc5aa25e790b0f12ca826040516115df919061303e565b60405180910390a25050565b6009602052816000526040600020818154811061160757600080fd5b90600052602060002001600091509150505481565b600d6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606040518060600160405280602e815260200161512a602e9139905090565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61170b611fe7565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061175157506117508561174b611fe7565b61166f565b5b611790576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178790614038565b60405180910390fd5b61179d85858585856126c2565b5050505050565b6000806000905060005b600354811015611818578380519060200120600a60006001846117d191906145fb565b81526020019081526020016000206000016040516117ef9190614947565b6040518091039020036118055760019150611818565b80806118109061446c565b9150506117ae565b5080915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60606000600161189b8461295d565b01905060008167ffffffffffffffff8111156118ba576118b9613225565b5b6040519080825280601f01601f1916602001820160405280156118ec5781602001600182028036833780820191505090505b509050600082602001820190505b60011561194f578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161194357611942614737565b5b049450600085036118fa575b819350505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036119c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c0906149d0565b60405180910390fd5b60006119d3611fe7565b905060006119e085612ab0565b905060006119ed85612ab0565b90506119fe83600089858589612b2a565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a5d91906145fb565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611adb9291906149f0565b60405180910390a4611af283600089858589612b32565b611b0183600089898989612b3a565b50505050505050565b60006001606383600081518110611b2457611b236145cc565b5b6020026020010151611b369190614a19565b611b4091906145fb565b905060008080611b4e610f4a565b905060005b6005811015611bd3578385118015611b845750818160058110611b7957611b786145cc565b5b602002015160ff1685105b15611ba357806004811115611b9c57611b9b61440e565b5b9250611bd3565b818160058110611bb657611bb56145cc565b5b602002015160ff1693508080611bcb9061446c565b915050611b53565b506000805b60096000856004811115611bef57611bee61440e565b5b6004811115611c0157611c0061440e565b5b815260200190815260200160002080549050811015611ca457600a600060096000876004811115611c3557611c3461440e565b5b6004811115611c4757611c4661440e565b5b81526020019081526020016000208381548110611c6757611c666145cc565b5b906000526020600020015481526020019081526020016000206001015482611c8f91906145fb565b91508080611c9c9061446c565b915050611bd8565b50600060018288600081518110611cbe57611cbd6145cc565b5b6020026020010151611cd09190614a19565b611cda91906145fb565b905060008080600090505b60096000886004811115611cfc57611cfb61440e565b5b6004811115611d0e57611d0d61440e565b5b815260200190815260200160002080549050811015611e7d578284118015611d9e5750600a6000600960008a6004811115611d4c57611d4b61440e565b5b6004811115611d5e57611d5d61440e565b5b81526020019081526020016000208381548110611d7e57611d7d6145cc565b5b906000526020600020015481526020019081526020016000206001015484105b15611dfe5760096000886004811115611dba57611db961440e565b5b6004811115611dcc57611dcb61440e565b5b81526020019081526020016000208181548110611dec57611deb6145cc565b5b90600052602060002001549150611e7d565b600a6000600960008a6004811115611e1957611e1861440e565b5b6004811115611e2b57611e2a61440e565b5b81526020019081526020016000208381548110611e4b57611e4a6145cc565b5b906000526020600020015481526020019081526020016000206001015492508080611e759061446c565b915050611ce5565b50611ecd600d60008c815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260016040518060200160405280600081525061195a565b6000600e6000600d60008e815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600d60008b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8eaeacc1f9ab5e04d365d1740e87ccbd0e2950aecca456459ee501ff7438dfbe8b83604051611fd39291906149f0565b60405180910390a250505050505050505050565b600033905090565b8151835114612033576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202a90614abc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036120a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209990614b4e565b60405180910390fd5b60006120ac611fe7565b90506120bc818787878787612b2a565b60005b845181101561226d5760008582815181106120dd576120dc6145cc565b5b6020026020010151905060008583815181106120fc576120fb6145cc565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561219d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219490614be0565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461225291906145fb565b92505081905550505050806122669061446c565b90506120bf565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516122e4929190614c00565b60405180910390a46122fa818787878787612b32565b612308818787878787612d11565b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361237e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237590614ca9565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161246f91906130f9565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036124eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e290614d3b565b60405180910390fd5b60006124f5611fe7565b9050600061250284612ab0565b9050600061250f84612ab0565b905061252f83876000858560405180602001604052806000815250612b2a565b600080600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050848110156125c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125bd90614dcd565b60405180910390fd5b84810360008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516126939291906149f0565b60405180910390a46126b984886000868660405180602001604052806000815250612b32565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612731576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272890614b4e565b60405180910390fd5b600061273b611fe7565b9050600061274885612ab0565b9050600061275585612ab0565b9050612765838989858589612b2a565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050858110156127fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f390614be0565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128b191906145fb565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a60405161292e9291906149f0565b60405180910390a4612944848a8a86868a612b32565b612952848a8a8a8a8a612b3a565b505050505050505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106129bb577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816129b1576129b0614737565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106129f8576d04ee2d6d415b85acef810000000083816129ee576129ed614737565b5b0492506020810190505b662386f26fc100008310612a2757662386f26fc100008381612a1d57612a1c614737565b5b0492506010810190505b6305f5e1008310612a50576305f5e1008381612a4657612a45614737565b5b0492506008810190505b6127108310612a75576127108381612a6b57612a6a614737565b5b0492506004810190505b60648310612a985760648381612a8e57612a8d614737565b5b0492506002810190505b600a8310612aa7576001810190505b80915050919050565b60606000600167ffffffffffffffff811115612acf57612ace613225565b5b604051908082528060200260200182016040528015612afd5781602001602082028036833780820191505090505b5090508281600081518110612b1557612b146145cc565b5b60200260200101818152505080915050919050565b505050505050565b505050505050565b612b598473ffffffffffffffffffffffffffffffffffffffff16612ee8565b15612d09578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612b9f959493929190614e42565b6020604051808303816000875af1925050508015612bdb57506040513d601f19601f82011682018060405250810190612bd89190614eb1565b60015b612c8057612be7614eeb565b806308c379a003612c435750612bfb614f0d565b80612c065750612c45565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3a91906131d1565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c779061500f565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612d07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cfe906150a1565b60405180910390fd5b505b505050505050565b612d308473ffffffffffffffffffffffffffffffffffffffff16612ee8565b15612ee0578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612d769594939291906150c1565b6020604051808303816000875af1925050508015612db257506040513d601f19601f82011682018060405250810190612daf9190614eb1565b60015b612e5757612dbe614eeb565b806308c379a003612e1a5750612dd2614f0d565b80612ddd5750612e1c565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e1191906131d1565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e4e9061500f565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612ede576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ed5906150a1565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b604051806040016040528060608152602001600081525090565b6040518060a00160405280600590602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612f8682612f5b565b9050919050565b612f9681612f7b565b8114612fa157600080fd5b50565b600081359050612fb381612f8d565b92915050565b6000819050919050565b612fcc81612fb9565b8114612fd757600080fd5b50565b600081359050612fe981612fc3565b92915050565b6000806040838503121561300657613005612f51565b5b600061301485828601612fa4565b925050602061302585828601612fda565b9150509250929050565b61303881612fb9565b82525050565b6000602082019050613053600083018461302f565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61308e81613059565b811461309957600080fd5b50565b6000813590506130ab81613085565b92915050565b6000602082840312156130c7576130c6612f51565b5b60006130d58482850161309c565b91505092915050565b60008115159050919050565b6130f3816130de565b82525050565b600060208201905061310e60008301846130ea565b92915050565b60006020828403121561312a57613129612f51565b5b600061313884828501612fda565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561317b578082015181840152602081019050613160565b60008484015250505050565b6000601f19601f8301169050919050565b60006131a382613141565b6131ad818561314c565b93506131bd81856020860161315d565b6131c681613187565b840191505092915050565b600060208201905081810360008301526131eb8184613198565b905092915050565b60006020828403121561320957613208612f51565b5b600061321784828501612fa4565b91505092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61325d82613187565b810181811067ffffffffffffffff8211171561327c5761327b613225565b5b80604052505050565b600061328f612f47565b905061329b8282613254565b919050565b600067ffffffffffffffff8211156132bb576132ba613225565b5b602082029050602081019050919050565b600080fd5b60006132e46132df846132a0565b613285565b90508083825260208201905060208402830185811115613307576133066132cc565b5b835b81811015613330578061331c8882612fda565b845260208401935050602081019050613309565b5050509392505050565b600082601f83011261334f5761334e613220565b5b813561335f8482602086016132d1565b91505092915050565b6000806040838503121561337f5761337e612f51565b5b600061338d85828601612fda565b925050602083013567ffffffffffffffff8111156133ae576133ad612f56565b5b6133ba8582860161333a565b9150509250929050565b600080fd5b600067ffffffffffffffff8211156133e4576133e3613225565b5b6133ed82613187565b9050602081019050919050565b82818337600083830152505050565b600061341c613417846133c9565b613285565b905082815260208101848484011115613438576134376133c4565b5b6134438482856133fa565b509392505050565b600082601f8301126134605761345f613220565b5b8135613470848260208601613409565b91505092915050565b600080600080600060a0868803121561349557613494612f51565b5b60006134a388828901612fa4565b95505060206134b488828901612fa4565b945050604086013567ffffffffffffffff8111156134d5576134d4612f56565b5b6134e18882890161333a565b935050606086013567ffffffffffffffff81111561350257613501612f56565b5b61350e8882890161333a565b925050608086013567ffffffffffffffff81111561352f5761352e612f56565b5b61353b8882890161344b565b9150509295509295909350565b6005811061355557600080fd5b50565b60008135905061356781613548565b92915050565b600067ffffffffffffffff82111561358857613587613225565b5b61359182613187565b9050602081019050919050565b60006135b16135ac8461356d565b613285565b9050828152602081018484840111156135cd576135cc6133c4565b5b6135d88482856133fa565b509392505050565b600082601f8301126135f5576135f4613220565b5b813561360584826020860161359e565b91505092915050565b60008060006060848603121561362757613626612f51565b5b600061363586828701613558565b935050602084013567ffffffffffffffff81111561365657613655612f56565b5b613662868287016135e0565b925050604061367386828701612fda565b9150509250925092565b600067ffffffffffffffff82111561369857613697613225565b5b602082029050602081019050919050565b60006136bc6136b78461367d565b613285565b905080838252602082019050602084028301858111156136df576136de6132cc565b5b835b8181101561370857806136f48882612fa4565b8452602084019350506020810190506136e1565b5050509392505050565b600082601f83011261372757613726613220565b5b81356137378482602086016136a9565b91505092915050565b6000806040838503121561375757613756612f51565b5b600083013567ffffffffffffffff81111561377557613774612f56565b5b61378185828601613712565b925050602083013567ffffffffffffffff8111156137a2576137a1612f56565b5b6137ae8582860161333a565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6137ed81612fb9565b82525050565b60006137ff83836137e4565b60208301905092915050565b6000602082019050919050565b6000613823826137b8565b61382d81856137c3565b9350613838836137d4565b8060005b8381101561386957815161385088826137f3565b975061385b8361380b565b92505060018101905061383c565b5085935050505092915050565b600060208201905081810360008301526138908184613818565b905092915050565b600082825260208201905092915050565b60006138b482613141565b6138be8185613898565b93506138ce81856020860161315d565b6138d781613187565b840191505092915050565b600060408301600083015184820360008601526138ff82826138a9565b915050602083015161391460208601826137e4565b508091505092915050565b6000602082019050818103600083015261393981846138e2565b905092915050565b600060059050919050565b600081905092915050565b6000819050919050565b600060ff82169050919050565b61397781613961565b82525050565b6000613989838361396e565b60208301905092915050565b6000602082019050919050565b6139ab81613941565b6139b5818461394c565b92506139c082613957565b8060005b838110156139f15781516139d8878261397d565b96506139e383613995565b9250506001810190506139c4565b505050505050565b600060a082019050613a0e60008301846139a2565b92915050565b60006040820190508181036000830152613a2e8185613198565b9050613a3d602083018461302f565b9392505050565b60008060408385031215613a5b57613a5a612f51565b5b6000613a6985828601612fda565b9250506020613a7a85828601612fda565b9150509250929050565b613a8d816130de565b8114613a9857600080fd5b50565b600081359050613aaa81613a84565b92915050565b60008060408385031215613ac757613ac6612f51565b5b6000613ad585828601612fa4565b9250506020613ae685828601613a9b565b9150509250929050565b60008060408385031215613b0757613b06612f51565b5b6000613b1585828601613558565b9250506020613b2685828601612fda565b9150509250929050565b613b3981612f7b565b82525050565b6000602082019050613b546000830184613b30565b92915050565b60008060408385031215613b7157613b70612f51565b5b6000613b7f85828601612fa4565b9250506020613b9085828601612fa4565b9150509250929050565b600080600080600060a08688031215613bb657613bb5612f51565b5b6000613bc488828901612fa4565b9550506020613bd588828901612fa4565b9450506040613be688828901612fda565b9350506060613bf788828901612fda565b925050608086013567ffffffffffffffff811115613c1857613c17612f56565b5b613c248882890161344b565b9150509295509295909350565b600060208284031215613c4757613c46612f51565b5b600082013567ffffffffffffffff811115613c6557613c64612f56565b5b613c71848285016135e0565b91505092915050565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000613cd6602a8361314c565b9150613ce182613c7a565b604082019050919050565b60006020820190508181036000830152613d0581613cc9565b9050919050565b7f546865206164647265737320646f65736e742068617665207065726d6973736960008201527f6f6e20746f2063616c6c20746869732066756e6374696f6e0000000000000000602082015250565b6000613d6860388361314c565b9150613d7382613d0c565b604082019050919050565b60006020820190508181036000830152613d9781613d5b565b9050919050565b7f5061636b2070726963652063616e277420626520300000000000000000000000600082015250565b6000613dd460158361314c565b9150613ddf82613d9e565b602082019050919050565b60006020820190508181036000830152613e0381613dc7565b9050919050565b600081905092915050565b7f68747470733a2f2f697066732e696f2f484153485f484552452f000000000000600082015250565b6000613e4b601a83613e0a565b9150613e5682613e15565b601a82019050919050565b6000613e6c82613141565b613e768185613e0a565b9350613e8681856020860161315d565b80840191505092915050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b6000613ec8600583613e0a565b9150613ed382613e92565b600582019050919050565b6000613ee982613e3e565b9150613ef58284613e61565b9150613f0082613ebb565b915081905092915050565b7f5468652061646472657373206973206e6f742070617274206f6620617574686f60008201527f72697a656420636f6e7472616374730000000000000000000000000000000000602082015250565b6000613f67602f8361314c565b9150613f7282613f0b565b604082019050919050565b60006020820190508181036000830152613f9681613f5a565b9050919050565b6000604082019050613fb26000830185613b30565b613fbf6020830184613b30565b9392505050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b6000614022602e8361314c565b915061402d82613fc6565b604082019050919050565b6000602082019050818103600083015261405181614015565b9050919050565b7f54686973206974656d20616c7265616479206578697374730000000000000000600082015250565b600061408e60188361314c565b915061409982614058565b602082019050919050565b600060208201905081810360008301526140bd81614081565b9050919050565b7f4974656d206d7573742068617665206974656d20537570706c79000000000000600082015250565b60006140fa601a8361314c565b9150614105826140c4565b602082019050919050565b60006020820190508181036000830152614129816140ed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061417757607f821691505b60208210810361418a57614189614130565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026141f27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826141b5565b6141fc86836141b5565b95508019841693508086168417925050509392505050565b6000819050919050565b600061423961423461422f84612fb9565b614214565b612fb9565b9050919050565b6000819050919050565b6142538361421e565b61426761425f82614240565b8484546141c2565b825550505050565b600090565b61427c61426f565b61428781848461424a565b505050565b5b818110156142ab576142a0600082614274565b60018101905061428d565b5050565b601f8211156142f0576142c181614190565b6142ca846141a5565b810160208510156142d9578190505b6142ed6142e5856141a5565b83018261428c565b50505b505050565b600082821c905092915050565b6000614313600019846008026142f5565b1980831691505092915050565b600061432c8383614302565b9150826002028217905092915050565b61434582613141565b67ffffffffffffffff81111561435e5761435d613225565b5b614368825461415f565b6143738282856142af565b600060209050601f8311600181146143a65760008415614394578287015190505b61439e8582614320565b865550614406565b601f1984166143b486614190565b60005b828110156143dc578489015182556001820191506020850194506020810190506143b7565b868310156143f957848901516143f5601f891682614302565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061447782612fb9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036144a9576144a861443d565b5b600182019050919050565b600581106144c5576144c461440e565b5b50565b60008190506144d6826144b4565b919050565b60006144e6826144c8565b9050919050565b6144f6816144db565b82525050565b600060608201905061451160008301866144ed565b61451e602083018561302f565b81810360408301526145308184613198565b9050949350505050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b600061459660298361314c565b91506145a18261453a565b604082019050919050565b600060208201905081810360008301526145c581614589565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061460682612fb9565b915061461183612fb9565b92508282019050808211156146295761462861443d565b5b92915050565b7f54686520616464726573732069732077616974696e6720666f7220726573706f60008201527f6e73650000000000000000000000000000000000000000000000000000000000602082015250565b600061468b60238361314c565b91506146968261462f565b604082019050919050565b600060208201905081810360008301526146ba8161467e565b9050919050565b60006146cc82612fb9565b91506146d783612fb9565b92508282039050818111156146ef576146ee61443d565b5b92915050565b600061470082612fb9565b915061470b83612fb9565b925082820261471981612fb9565b915082820484148315176147305761472f61443d565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061477182612fb9565b915061477c83612fb9565b92508261478c5761478b614737565b5b828204905092915050565b6000819050919050565b6147aa81614797565b82525050565b600067ffffffffffffffff82169050919050565b6147cd816147b0565b82525050565b600061ffff82169050919050565b6147ea816147d3565b82525050565b600063ffffffff82169050919050565b614809816147f0565b82525050565b600060a08201905061482460008301886147a1565b61483160208301876147c4565b61483e60408301866147e1565b61484b6060830185614800565b6148586080830184614800565b9695505050505050565b60008151905061487181612fc3565b92915050565b60006020828403121561488d5761488c612f51565b5b600061489b84828501614862565b91505092915050565b600081905092915050565b60008190508160005260206000209050919050565b600081546148d18161415f565b6148db81866148a4565b945060018216600081146148f6576001811461490b5761493e565b60ff198316865281151582028601935061493e565b614914856148af565b60005b8381101561493657815481890152600182019150602081019050614917565b838801955050505b50505092915050565b600061495382846148c4565b915081905092915050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006149ba60218361314c565b91506149c58261495e565b604082019050919050565b600060208201905081810360008301526149e9816149ad565b9050919050565b6000604082019050614a05600083018561302f565b614a12602083018461302f565b9392505050565b6000614a2482612fb9565b9150614a2f83612fb9565b925082614a3f57614a3e614737565b5b828206905092915050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000614aa660288361314c565b9150614ab182614a4a565b604082019050919050565b60006020820190508181036000830152614ad581614a99565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614b3860258361314c565b9150614b4382614adc565b604082019050919050565b60006020820190508181036000830152614b6781614b2b565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000614bca602a8361314c565b9150614bd582614b6e565b604082019050919050565b60006020820190508181036000830152614bf981614bbd565b9050919050565b60006040820190508181036000830152614c1a8185613818565b90508181036020830152614c2e8184613818565b90509392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000614c9360298361314c565b9150614c9e82614c37565b604082019050919050565b60006020820190508181036000830152614cc281614c86565b9050919050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000614d2560238361314c565b9150614d3082614cc9565b604082019050919050565b60006020820190508181036000830152614d5481614d18565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b6000614db760248361314c565b9150614dc282614d5b565b604082019050919050565b60006020820190508181036000830152614de681614daa565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000614e1482614ded565b614e1e8185614df8565b9350614e2e81856020860161315d565b614e3781613187565b840191505092915050565b600060a082019050614e576000830188613b30565b614e646020830187613b30565b614e71604083018661302f565b614e7e606083018561302f565b8181036080830152614e908184614e09565b90509695505050505050565b600081519050614eab81613085565b92915050565b600060208284031215614ec757614ec6612f51565b5b6000614ed584828501614e9c565b91505092915050565b60008160e01c9050919050565b600060033d1115614f0a5760046000803e614f07600051614ede565b90505b90565b600060443d10614f9a57614f1f612f47565b60043d036004823e80513d602482011167ffffffffffffffff82111715614f47575050614f9a565b808201805167ffffffffffffffff811115614f655750505050614f9a565b80602083010160043d038501811115614f82575050505050614f9a565b614f9182602001850186613254565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000614ff960348361314c565b915061500482614f9d565b604082019050919050565b6000602082019050818103600083015261502881614fec565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b600061508b60288361314c565b91506150968261502f565b604082019050919050565b600060208201905081810360008301526150ba8161507e565b9050919050565b600060a0820190506150d66000830188613b30565b6150e36020830187613b30565b81810360408301526150f58186613818565b905081810360608301526151098185613818565b9050818103608083015261511d8184614e09565b9050969550505050505056fe68747470733a2f2f697066732e696f2f697066732f484153485f484552452f636f6c6c656374696f6e2e6a736f6ea26469706673582212204a384171144fb4e15ced47e43426a06ec9f164c6bf0257f50f02c18ee527ec4c64736f6c6343000813003368747470733a2f2f697066732e696f2f697066732f484153485f484552452f7b69647d2e6a736f6e",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c35760003560e01c80635edc480b116100f9578063b74fce2811610097578063e8a3d48511610071578063e8a3d4851461054d578063e985e9c51461056b578063f242432a1461059b578063fb7e1ad1146105b7576101c3565b8063b74fce28146104d1578063e41669db146104ed578063e74543b51461051d576101c3565b8063716464b3116100d3578063716464b31461044b57806390541a1114610467578063a22cb46514610485578063aae81461146104a1576101c3565b80635edc480b146103e0578063656bd0ad1461041157806367561d931461042f576101c3565b80631fc8daa411610166578063468fddec11610140578063468fddec146103465780634e1273f414610362578063522700ba146103925780635dacf5f4146103c2576101c3565b80631fc8daa4146102de5780631fe543e31461030e5780632eb2c2d61461032a576101c3565b80630e89341c116101a25780630e89341c146102445780631077246214610274578063163cd4111461029257806316d02d64146102ae576101c3565b8062fdd58e146101c857806301ffc9a7146101f85780630b6af49914610228575b600080fd5b6101e260048036038101906101dd9190612fef565b6105e7565b6040516101ef919061303e565b60405180910390f35b610212600480360381019061020d91906130b1565b6106af565b60405161021f91906130f9565b60405180910390f35b610242600480360381019061023d9190613114565b610791565b005b61025e60048036038101906102599190613114565b61086e565b60405161026b91906131d1565b60405180910390f35b61027c61089f565b604051610289919061303e565b60405180910390f35b6102ac60048036038101906102a79190612fef565b6108a5565b005b6102c860048036038101906102c391906131f3565b6109a6565b6040516102d5919061303e565b60405180910390f35b6102f860048036038101906102f391906131f3565b6109be565b60405161030591906130f9565b60405180910390f35b61032860048036038101906103239190613368565b6109de565b005b610344600480360381019061033f9190613479565b610a9e565b005b610360600480360381019061035b919061360e565b610b3f565b005b61037c60048036038101906103779190613740565b610d68565b6040516103899190613876565b60405180910390f35b6103ac60048036038101906103a79190613114565b610e81565b6040516103b9919061391f565b60405180910390f35b6103ca610f4a565b6040516103d791906139f9565b60405180910390f35b6103fa60048036038101906103f59190613114565b610f92565b604051610408929190613a14565b60405180910390f35b61041961103e565b604051610426919061303e565b60405180910390f35b610449600480360381019061044491906131f3565b611044565b005b61046560048036038101906104609190613a44565b61112f565b005b61046f611233565b60405161047c919061303e565b60405180910390f35b61049f600480360381019061049a9190613ab0565b611238565b005b6104bb60048036038101906104b691906131f3565b61124e565b6040516104c891906130f9565b60405180910390f35b6104eb60048036038101906104e691906131f3565b61126e565b005b61050760048036038101906105029190613af0565b6115eb565b604051610514919061303e565b60405180910390f35b61053760048036038101906105329190613114565b61161c565b6040516105449190613b3f565b60405180910390f35b61055561164f565b60405161056291906131d1565b60405180910390f35b61058560048036038101906105809190613b5a565b61166f565b60405161059291906130f9565b60405180910390f35b6105b560048036038101906105b09190613b9a565b611703565b005b6105d160048036038101906105cc9190613c31565b6117a4565b6040516105de91906130f9565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064e90613cec565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061077a57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061078a575061078982611822565b5b9050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081890613d7e565b60405180910390fd5b60008111610864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085b90613dea565b60405180910390fd5b8060048190555050565b60606108798261188c565b6040516020016108899190613ede565b6040516020818303038152906040529050919050565b60035481565b60011515600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092f90613f7d565b60405180910390fd5b610954826000836040518060200160405280600081525061195a565b8173ffffffffffffffffffffffffffffffffffffffff167f108bfff6e011bf1baf318710fb89a5a2258e9fa5c2c3524b1f5d7e93c3ebf9258260405161099a919061303e565b60405180910390a25050565b600c6020528060005260406000206000915090505481565b600b6020528060005260406000206000915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a9057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610a87929190613f9d565b60405180910390fd5b610a9a8282611b0a565b5050565b610aa6611fe7565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610aec5750610aeb85610ae6611fe7565b61166f565b5b610b2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2290614038565b60405180910390fd5b610b388585858585611fef565b5050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc690613d7e565b60405180910390fd5b60001515610bdc836117a4565b151514610c1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c15906140a4565b60405180910390fd5b60008111610c61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5890614110565b60405180910390fd5b604051806040016040528083815260200182815250600a600060035481526020019081526020016000206000820151816000019081610ca0919061433c565b506020820151816001015590505060096000846004811115610cc557610cc461440e565b5b6004811115610cd757610cd661440e565b5b8152602001908152602001600020600354908060018154018082558091505060019003906000526020600020016000909190919091505560036000815480929190610d219061446c565b91905055507fe54ad0ab4e12db37ed8635a4aa3069158402f2aa26b35ff2f83a3a29744ed7878360035484604051610d5b939291906144fc565b60405180910390a1505050565b60608151835114610dae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da5906145ac565b60405180910390fd5b6000835167ffffffffffffffff811115610dcb57610dca613225565b5b604051908082528060200260200182016040528015610df95781602001602082028036833780820191505090505b50905060005b8451811015610e7657610e46858281518110610e1e57610e1d6145cc565b5b6020026020010151858381518110610e3957610e386145cc565b5b60200260200101516105e7565b828281518110610e5957610e586145cc565b5b60200260200101818152505080610e6f9061446c565b9050610dff565b508091505092915050565b610e89612f0b565b600a6000838152602001908152602001600020604051806040016040529081600082018054610eb79061415f565b80601f0160208091040260200160405190810160405280929190818152602001828054610ee39061415f565b8015610f305780601f10610f0557610100808354040283529160200191610f30565b820191906000526020600020905b815481529060010190602001808311610f1357829003601f168201915b505050505081526020016001820154815250509050919050565b610f52612f25565b6040518060a00160405280600c60ff168152602001602260ff168152602001603860ff168152602001604e60ff168152602001606460ff16815250905090565b600a602052806000526040600020600091509050806000018054610fb59061415f565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe19061415f565b801561102e5780601f106110035761010080835404028352916020019161102e565b820191906000526020600020905b81548152906001019060200180831161101157829003601f168201915b5050505050908060010154905082565b60045481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cb90613d7e565b60405180910390fd5b6001600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b690613d7e565b60405180910390fd5b60008111611202576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f990614110565b60405180910390fd5b80600a6000848152602001908152602001600020600101600082825461122891906145fb565b925050819055505050565b600081565b61124a611243611fe7565b8383612310565b5050565b600e6020528060005260406000206000915054906101000a900460ff1681565b60001515600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514611301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f8906146a1565b60405180910390fd5b6064600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054606461134f91906146c1565b60045461135c91906146f5565b6113669190614766565b6113718260006105e7565b10156113a9576040517fef56c0c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114198160006064600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460646113fd91906146c1565b60045461140a91906146f5565b6114149190614766565b61247c565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600754600660149054906101000a900467ffffffffffffffff166003600860009054906101000a900463ffffffff1660026040518663ffffffff1660e01b81526004016114aa95949392919061480f565b6020604051808303816000875af11580156114c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ed9190614877565b905081600d600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f6996b236aa85c535db5df7b3cb8925ac9a6758d1550035bc5aa25e790b0f12ca826040516115df919061303e565b60405180910390a25050565b6009602052816000526040600020818154811061160757600080fd5b90600052602060002001600091509150505481565b600d6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606040518060600160405280602e815260200161512a602e9139905090565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61170b611fe7565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061175157506117508561174b611fe7565b61166f565b5b611790576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178790614038565b60405180910390fd5b61179d85858585856126c2565b5050505050565b6000806000905060005b600354811015611818578380519060200120600a60006001846117d191906145fb565b81526020019081526020016000206000016040516117ef9190614947565b6040518091039020036118055760019150611818565b80806118109061446c565b9150506117ae565b5080915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60606000600161189b8461295d565b01905060008167ffffffffffffffff8111156118ba576118b9613225565b5b6040519080825280601f01601f1916602001820160405280156118ec5781602001600182028036833780820191505090505b509050600082602001820190505b60011561194f578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161194357611942614737565b5b049450600085036118fa575b819350505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036119c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c0906149d0565b60405180910390fd5b60006119d3611fe7565b905060006119e085612ab0565b905060006119ed85612ab0565b90506119fe83600089858589612b2a565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a5d91906145fb565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611adb9291906149f0565b60405180910390a4611af283600089858589612b32565b611b0183600089898989612b3a565b50505050505050565b60006001606383600081518110611b2457611b236145cc565b5b6020026020010151611b369190614a19565b611b4091906145fb565b905060008080611b4e610f4a565b905060005b6005811015611bd3578385118015611b845750818160058110611b7957611b786145cc565b5b602002015160ff1685105b15611ba357806004811115611b9c57611b9b61440e565b5b9250611bd3565b818160058110611bb657611bb56145cc565b5b602002015160ff1693508080611bcb9061446c565b915050611b53565b506000805b60096000856004811115611bef57611bee61440e565b5b6004811115611c0157611c0061440e565b5b815260200190815260200160002080549050811015611ca457600a600060096000876004811115611c3557611c3461440e565b5b6004811115611c4757611c4661440e565b5b81526020019081526020016000208381548110611c6757611c666145cc565b5b906000526020600020015481526020019081526020016000206001015482611c8f91906145fb565b91508080611c9c9061446c565b915050611bd8565b50600060018288600081518110611cbe57611cbd6145cc565b5b6020026020010151611cd09190614a19565b611cda91906145fb565b905060008080600090505b60096000886004811115611cfc57611cfb61440e565b5b6004811115611d0e57611d0d61440e565b5b815260200190815260200160002080549050811015611e7d578284118015611d9e5750600a6000600960008a6004811115611d4c57611d4b61440e565b5b6004811115611d5e57611d5d61440e565b5b81526020019081526020016000208381548110611d7e57611d7d6145cc565b5b906000526020600020015481526020019081526020016000206001015484105b15611dfe5760096000886004811115611dba57611db961440e565b5b6004811115611dcc57611dcb61440e565b5b81526020019081526020016000208181548110611dec57611deb6145cc565b5b90600052602060002001549150611e7d565b600a6000600960008a6004811115611e1957611e1861440e565b5b6004811115611e2b57611e2a61440e565b5b81526020019081526020016000208381548110611e4b57611e4a6145cc565b5b906000526020600020015481526020019081526020016000206001015492508080611e759061446c565b915050611ce5565b50611ecd600d60008c815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260016040518060200160405280600081525061195a565b6000600e6000600d60008e815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600d60008b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8eaeacc1f9ab5e04d365d1740e87ccbd0e2950aecca456459ee501ff7438dfbe8b83604051611fd39291906149f0565b60405180910390a250505050505050505050565b600033905090565b8151835114612033576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202a90614abc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036120a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209990614b4e565b60405180910390fd5b60006120ac611fe7565b90506120bc818787878787612b2a565b60005b845181101561226d5760008582815181106120dd576120dc6145cc565b5b6020026020010151905060008583815181106120fc576120fb6145cc565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561219d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219490614be0565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461225291906145fb565b92505081905550505050806122669061446c565b90506120bf565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516122e4929190614c00565b60405180910390a46122fa818787878787612b32565b612308818787878787612d11565b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361237e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237590614ca9565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161246f91906130f9565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036124eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e290614d3b565b60405180910390fd5b60006124f5611fe7565b9050600061250284612ab0565b9050600061250f84612ab0565b905061252f83876000858560405180602001604052806000815250612b2a565b600080600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050848110156125c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125bd90614dcd565b60405180910390fd5b84810360008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516126939291906149f0565b60405180910390a46126b984886000868660405180602001604052806000815250612b32565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612731576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272890614b4e565b60405180910390fd5b600061273b611fe7565b9050600061274885612ab0565b9050600061275585612ab0565b9050612765838989858589612b2a565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050858110156127fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f390614be0565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128b191906145fb565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a60405161292e9291906149f0565b60405180910390a4612944848a8a86868a612b32565b612952848a8a8a8a8a612b3a565b505050505050505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106129bb577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816129b1576129b0614737565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106129f8576d04ee2d6d415b85acef810000000083816129ee576129ed614737565b5b0492506020810190505b662386f26fc100008310612a2757662386f26fc100008381612a1d57612a1c614737565b5b0492506010810190505b6305f5e1008310612a50576305f5e1008381612a4657612a45614737565b5b0492506008810190505b6127108310612a75576127108381612a6b57612a6a614737565b5b0492506004810190505b60648310612a985760648381612a8e57612a8d614737565b5b0492506002810190505b600a8310612aa7576001810190505b80915050919050565b60606000600167ffffffffffffffff811115612acf57612ace613225565b5b604051908082528060200260200182016040528015612afd5781602001602082028036833780820191505090505b5090508281600081518110612b1557612b146145cc565b5b60200260200101818152505080915050919050565b505050505050565b505050505050565b612b598473ffffffffffffffffffffffffffffffffffffffff16612ee8565b15612d09578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612b9f959493929190614e42565b6020604051808303816000875af1925050508015612bdb57506040513d601f19601f82011682018060405250810190612bd89190614eb1565b60015b612c8057612be7614eeb565b806308c379a003612c435750612bfb614f0d565b80612c065750612c45565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3a91906131d1565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c779061500f565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612d07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cfe906150a1565b60405180910390fd5b505b505050505050565b612d308473ffffffffffffffffffffffffffffffffffffffff16612ee8565b15612ee0578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612d769594939291906150c1565b6020604051808303816000875af1925050508015612db257506040513d601f19601f82011682018060405250810190612daf9190614eb1565b60015b612e5757612dbe614eeb565b806308c379a003612e1a5750612dd2614f0d565b80612ddd5750612e1c565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e1191906131d1565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e4e9061500f565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612ede576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ed5906150a1565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b604051806040016040528060608152602001600081525090565b6040518060a00160405280600590602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612f8682612f5b565b9050919050565b612f9681612f7b565b8114612fa157600080fd5b50565b600081359050612fb381612f8d565b92915050565b6000819050919050565b612fcc81612fb9565b8114612fd757600080fd5b50565b600081359050612fe981612fc3565b92915050565b6000806040838503121561300657613005612f51565b5b600061301485828601612fa4565b925050602061302585828601612fda565b9150509250929050565b61303881612fb9565b82525050565b6000602082019050613053600083018461302f565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61308e81613059565b811461309957600080fd5b50565b6000813590506130ab81613085565b92915050565b6000602082840312156130c7576130c6612f51565b5b60006130d58482850161309c565b91505092915050565b60008115159050919050565b6130f3816130de565b82525050565b600060208201905061310e60008301846130ea565b92915050565b60006020828403121561312a57613129612f51565b5b600061313884828501612fda565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561317b578082015181840152602081019050613160565b60008484015250505050565b6000601f19601f8301169050919050565b60006131a382613141565b6131ad818561314c565b93506131bd81856020860161315d565b6131c681613187565b840191505092915050565b600060208201905081810360008301526131eb8184613198565b905092915050565b60006020828403121561320957613208612f51565b5b600061321784828501612fa4565b91505092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61325d82613187565b810181811067ffffffffffffffff8211171561327c5761327b613225565b5b80604052505050565b600061328f612f47565b905061329b8282613254565b919050565b600067ffffffffffffffff8211156132bb576132ba613225565b5b602082029050602081019050919050565b600080fd5b60006132e46132df846132a0565b613285565b90508083825260208201905060208402830185811115613307576133066132cc565b5b835b81811015613330578061331c8882612fda565b845260208401935050602081019050613309565b5050509392505050565b600082601f83011261334f5761334e613220565b5b813561335f8482602086016132d1565b91505092915050565b6000806040838503121561337f5761337e612f51565b5b600061338d85828601612fda565b925050602083013567ffffffffffffffff8111156133ae576133ad612f56565b5b6133ba8582860161333a565b9150509250929050565b600080fd5b600067ffffffffffffffff8211156133e4576133e3613225565b5b6133ed82613187565b9050602081019050919050565b82818337600083830152505050565b600061341c613417846133c9565b613285565b905082815260208101848484011115613438576134376133c4565b5b6134438482856133fa565b509392505050565b600082601f8301126134605761345f613220565b5b8135613470848260208601613409565b91505092915050565b600080600080600060a0868803121561349557613494612f51565b5b60006134a388828901612fa4565b95505060206134b488828901612fa4565b945050604086013567ffffffffffffffff8111156134d5576134d4612f56565b5b6134e18882890161333a565b935050606086013567ffffffffffffffff81111561350257613501612f56565b5b61350e8882890161333a565b925050608086013567ffffffffffffffff81111561352f5761352e612f56565b5b61353b8882890161344b565b9150509295509295909350565b6005811061355557600080fd5b50565b60008135905061356781613548565b92915050565b600067ffffffffffffffff82111561358857613587613225565b5b61359182613187565b9050602081019050919050565b60006135b16135ac8461356d565b613285565b9050828152602081018484840111156135cd576135cc6133c4565b5b6135d88482856133fa565b509392505050565b600082601f8301126135f5576135f4613220565b5b813561360584826020860161359e565b91505092915050565b60008060006060848603121561362757613626612f51565b5b600061363586828701613558565b935050602084013567ffffffffffffffff81111561365657613655612f56565b5b613662868287016135e0565b925050604061367386828701612fda565b9150509250925092565b600067ffffffffffffffff82111561369857613697613225565b5b602082029050602081019050919050565b60006136bc6136b78461367d565b613285565b905080838252602082019050602084028301858111156136df576136de6132cc565b5b835b8181101561370857806136f48882612fa4565b8452602084019350506020810190506136e1565b5050509392505050565b600082601f83011261372757613726613220565b5b81356137378482602086016136a9565b91505092915050565b6000806040838503121561375757613756612f51565b5b600083013567ffffffffffffffff81111561377557613774612f56565b5b61378185828601613712565b925050602083013567ffffffffffffffff8111156137a2576137a1612f56565b5b6137ae8582860161333a565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6137ed81612fb9565b82525050565b60006137ff83836137e4565b60208301905092915050565b6000602082019050919050565b6000613823826137b8565b61382d81856137c3565b9350613838836137d4565b8060005b8381101561386957815161385088826137f3565b975061385b8361380b565b92505060018101905061383c565b5085935050505092915050565b600060208201905081810360008301526138908184613818565b905092915050565b600082825260208201905092915050565b60006138b482613141565b6138be8185613898565b93506138ce81856020860161315d565b6138d781613187565b840191505092915050565b600060408301600083015184820360008601526138ff82826138a9565b915050602083015161391460208601826137e4565b508091505092915050565b6000602082019050818103600083015261393981846138e2565b905092915050565b600060059050919050565b600081905092915050565b6000819050919050565b600060ff82169050919050565b61397781613961565b82525050565b6000613989838361396e565b60208301905092915050565b6000602082019050919050565b6139ab81613941565b6139b5818461394c565b92506139c082613957565b8060005b838110156139f15781516139d8878261397d565b96506139e383613995565b9250506001810190506139c4565b505050505050565b600060a082019050613a0e60008301846139a2565b92915050565b60006040820190508181036000830152613a2e8185613198565b9050613a3d602083018461302f565b9392505050565b60008060408385031215613a5b57613a5a612f51565b5b6000613a6985828601612fda565b9250506020613a7a85828601612fda565b9150509250929050565b613a8d816130de565b8114613a9857600080fd5b50565b600081359050613aaa81613a84565b92915050565b60008060408385031215613ac757613ac6612f51565b5b6000613ad585828601612fa4565b9250506020613ae685828601613a9b565b9150509250929050565b60008060408385031215613b0757613b06612f51565b5b6000613b1585828601613558565b9250506020613b2685828601612fda565b9150509250929050565b613b3981612f7b565b82525050565b6000602082019050613b546000830184613b30565b92915050565b60008060408385031215613b7157613b70612f51565b5b6000613b7f85828601612fa4565b9250506020613b9085828601612fa4565b9150509250929050565b600080600080600060a08688031215613bb657613bb5612f51565b5b6000613bc488828901612fa4565b9550506020613bd588828901612fa4565b9450506040613be688828901612fda565b9350506060613bf788828901612fda565b925050608086013567ffffffffffffffff811115613c1857613c17612f56565b5b613c248882890161344b565b9150509295509295909350565b600060208284031215613c4757613c46612f51565b5b600082013567ffffffffffffffff811115613c6557613c64612f56565b5b613c71848285016135e0565b91505092915050565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000613cd6602a8361314c565b9150613ce182613c7a565b604082019050919050565b60006020820190508181036000830152613d0581613cc9565b9050919050565b7f546865206164647265737320646f65736e742068617665207065726d6973736960008201527f6f6e20746f2063616c6c20746869732066756e6374696f6e0000000000000000602082015250565b6000613d6860388361314c565b9150613d7382613d0c565b604082019050919050565b60006020820190508181036000830152613d9781613d5b565b9050919050565b7f5061636b2070726963652063616e277420626520300000000000000000000000600082015250565b6000613dd460158361314c565b9150613ddf82613d9e565b602082019050919050565b60006020820190508181036000830152613e0381613dc7565b9050919050565b600081905092915050565b7f68747470733a2f2f697066732e696f2f484153485f484552452f000000000000600082015250565b6000613e4b601a83613e0a565b9150613e5682613e15565b601a82019050919050565b6000613e6c82613141565b613e768185613e0a565b9350613e8681856020860161315d565b80840191505092915050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b6000613ec8600583613e0a565b9150613ed382613e92565b600582019050919050565b6000613ee982613e3e565b9150613ef58284613e61565b9150613f0082613ebb565b915081905092915050565b7f5468652061646472657373206973206e6f742070617274206f6620617574686f60008201527f72697a656420636f6e7472616374730000000000000000000000000000000000602082015250565b6000613f67602f8361314c565b9150613f7282613f0b565b604082019050919050565b60006020820190508181036000830152613f9681613f5a565b9050919050565b6000604082019050613fb26000830185613b30565b613fbf6020830184613b30565b9392505050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b6000614022602e8361314c565b915061402d82613fc6565b604082019050919050565b6000602082019050818103600083015261405181614015565b9050919050565b7f54686973206974656d20616c7265616479206578697374730000000000000000600082015250565b600061408e60188361314c565b915061409982614058565b602082019050919050565b600060208201905081810360008301526140bd81614081565b9050919050565b7f4974656d206d7573742068617665206974656d20537570706c79000000000000600082015250565b60006140fa601a8361314c565b9150614105826140c4565b602082019050919050565b60006020820190508181036000830152614129816140ed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061417757607f821691505b60208210810361418a57614189614130565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026141f27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826141b5565b6141fc86836141b5565b95508019841693508086168417925050509392505050565b6000819050919050565b600061423961423461422f84612fb9565b614214565b612fb9565b9050919050565b6000819050919050565b6142538361421e565b61426761425f82614240565b8484546141c2565b825550505050565b600090565b61427c61426f565b61428781848461424a565b505050565b5b818110156142ab576142a0600082614274565b60018101905061428d565b5050565b601f8211156142f0576142c181614190565b6142ca846141a5565b810160208510156142d9578190505b6142ed6142e5856141a5565b83018261428c565b50505b505050565b600082821c905092915050565b6000614313600019846008026142f5565b1980831691505092915050565b600061432c8383614302565b9150826002028217905092915050565b61434582613141565b67ffffffffffffffff81111561435e5761435d613225565b5b614368825461415f565b6143738282856142af565b600060209050601f8311600181146143a65760008415614394578287015190505b61439e8582614320565b865550614406565b601f1984166143b486614190565b60005b828110156143dc578489015182556001820191506020850194506020810190506143b7565b868310156143f957848901516143f5601f891682614302565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061447782612fb9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036144a9576144a861443d565b5b600182019050919050565b600581106144c5576144c461440e565b5b50565b60008190506144d6826144b4565b919050565b60006144e6826144c8565b9050919050565b6144f6816144db565b82525050565b600060608201905061451160008301866144ed565b61451e602083018561302f565b81810360408301526145308184613198565b9050949350505050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b600061459660298361314c565b91506145a18261453a565b604082019050919050565b600060208201905081810360008301526145c581614589565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061460682612fb9565b915061461183612fb9565b92508282019050808211156146295761462861443d565b5b92915050565b7f54686520616464726573732069732077616974696e6720666f7220726573706f60008201527f6e73650000000000000000000000000000000000000000000000000000000000602082015250565b600061468b60238361314c565b91506146968261462f565b604082019050919050565b600060208201905081810360008301526146ba8161467e565b9050919050565b60006146cc82612fb9565b91506146d783612fb9565b92508282039050818111156146ef576146ee61443d565b5b92915050565b600061470082612fb9565b915061470b83612fb9565b925082820261471981612fb9565b915082820484148315176147305761472f61443d565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061477182612fb9565b915061477c83612fb9565b92508261478c5761478b614737565b5b828204905092915050565b6000819050919050565b6147aa81614797565b82525050565b600067ffffffffffffffff82169050919050565b6147cd816147b0565b82525050565b600061ffff82169050919050565b6147ea816147d3565b82525050565b600063ffffffff82169050919050565b614809816147f0565b82525050565b600060a08201905061482460008301886147a1565b61483160208301876147c4565b61483e60408301866147e1565b61484b6060830185614800565b6148586080830184614800565b9695505050505050565b60008151905061487181612fc3565b92915050565b60006020828403121561488d5761488c612f51565b5b600061489b84828501614862565b91505092915050565b600081905092915050565b60008190508160005260206000209050919050565b600081546148d18161415f565b6148db81866148a4565b945060018216600081146148f6576001811461490b5761493e565b60ff198316865281151582028601935061493e565b614914856148af565b60005b8381101561493657815481890152600182019150602081019050614917565b838801955050505b50505092915050565b600061495382846148c4565b915081905092915050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006149ba60218361314c565b91506149c58261495e565b604082019050919050565b600060208201905081810360008301526149e9816149ad565b9050919050565b6000604082019050614a05600083018561302f565b614a12602083018461302f565b9392505050565b6000614a2482612fb9565b9150614a2f83612fb9565b925082614a3f57614a3e614737565b5b828206905092915050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000614aa660288361314c565b9150614ab182614a4a565b604082019050919050565b60006020820190508181036000830152614ad581614a99565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614b3860258361314c565b9150614b4382614adc565b604082019050919050565b60006020820190508181036000830152614b6781614b2b565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000614bca602a8361314c565b9150614bd582614b6e565b604082019050919050565b60006020820190508181036000830152614bf981614bbd565b9050919050565b60006040820190508181036000830152614c1a8185613818565b90508181036020830152614c2e8184613818565b90509392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000614c9360298361314c565b9150614c9e82614c37565b604082019050919050565b60006020820190508181036000830152614cc281614c86565b9050919050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000614d2560238361314c565b9150614d3082614cc9565b604082019050919050565b60006020820190508181036000830152614d5481614d18565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b6000614db760248361314c565b9150614dc282614d5b565b604082019050919050565b60006020820190508181036000830152614de681614daa565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000614e1482614ded565b614e1e8185614df8565b9350614e2e81856020860161315d565b614e3781613187565b840191505092915050565b600060a082019050614e576000830188613b30565b614e646020830187613b30565b614e71604083018661302f565b614e7e606083018561302f565b8181036080830152614e908184614e09565b90509695505050505050565b600081519050614eab81613085565b92915050565b600060208284031215614ec757614ec6612f51565b5b6000614ed584828501614e9c565b91505092915050565b60008160e01c9050919050565b600060033d1115614f0a5760046000803e614f07600051614ede565b90505b90565b600060443d10614f9a57614f1f612f47565b60043d036004823e80513d602482011167ffffffffffffffff82111715614f47575050614f9a565b808201805167ffffffffffffffff811115614f655750505050614f9a565b80602083010160043d038501811115614f82575050505050614f9a565b614f9182602001850186613254565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000614ff960348361314c565b915061500482614f9d565b604082019050919050565b6000602082019050818103600083015261502881614fec565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b600061508b60288361314c565b91506150968261502f565b604082019050919050565b600060208201905081810360008301526150ba8161507e565b9050919050565b600060a0820190506150d66000830188613b30565b6150e36020830187613b30565b81810360408301526150f58186613818565b905081810360608301526151098185613818565b9050818103608083015261511d8184614e09565b9050969550505050505056fe68747470733a2f2f697066732e696f2f697066732f484153485f484552452f636f6c6c656374696f6e2e6a736f6ea26469706673582212204a384171144fb4e15ced47e43426a06ec9f164c6bf0257f50f02c18ee527ec4c64736f6c63430008130033",
  "devdoc": {
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1402,
        "contract": "contracts/AvatarItems.sol:AvatarItems",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1408,
        "contract": "contracts/AvatarItems.sol:AvatarItems",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1410,
        "contract": "contracts/AvatarItems.sol:AvatarItems",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 4412,
        "contract": "contracts/AvatarItems.sol:AvatarItems",
        "label": "s_itemCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4414,
        "contract": "contracts/AvatarItems.sol:AvatarItems",
        "label": "s_packPrice",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4416,
        "contract": "contracts/AvatarItems.sol:AvatarItems",
        "label": "s_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4419,
        "contract": "contracts/AvatarItems.sol:AvatarItems",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(VRFCoordinatorV2Interface)95"
      },
      {
        "astId": 4421,
        "contract": "contracts/AvatarItems.sol:AvatarItems",
        "label": "s_subscriptionId",
        "offset": 20,
        "slot": "6",
        "type": "t_uint64"
      },
      {
        "astId": 4423,
        "contract": "contracts/AvatarItems.sol:AvatarItems",
        "label": "s_keyHash",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes32"
      },
      {
        "astId": 4425,
        "contract": "contracts/AvatarItems.sol:AvatarItems",
        "label": "s_callbackGasLimit",
        "offset": 0,
        "slot": "8",
        "type": "t_uint32"
      },
      {
        "astId": 4448,
        "contract": "contracts/AvatarItems.sol:AvatarItems",
        "label": "ItemTypes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_enum(ItemType)4437,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4453,
        "contract": "contracts/AvatarItems.sol:AvatarItems",
        "label": "ItemDescriptions",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(ItemDescription)4442_storage)"
      },
      {
        "astId": 4457,
        "contract": "contracts/AvatarItems.sol:AvatarItems",
        "label": "AuthorizedContracts",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4461,
        "contract": "contracts/AvatarItems.sol:AvatarItems",
        "label": "Discounts",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4749,
        "contract": "contracts/AvatarItems.sol:AvatarItems",
        "label": "getRequestAddress",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4753,
        "contract": "contracts/AvatarItems.sol:AvatarItems",
        "label": "waitingForResponse",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)95": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(ItemType)4437": {
        "encoding": "inplace",
        "label": "enum AvatarItems.ItemType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(ItemType)4437,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(ItemType)4437",
        "label": "mapping(enum AvatarItems.ItemType => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(ItemDescription)4442_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AvatarItems.ItemDescription)",
        "numberOfBytes": "32",
        "value": "t_struct(ItemDescription)4442_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ItemDescription)4442_storage": {
        "encoding": "inplace",
        "label": "struct AvatarItems.ItemDescription",
        "members": [
          {
            "astId": 4439,
            "contract": "contracts/AvatarItems.sol:AvatarItems",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4441,
            "contract": "contracts/AvatarItems.sol:AvatarItems",
            "label": "itemSupply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}